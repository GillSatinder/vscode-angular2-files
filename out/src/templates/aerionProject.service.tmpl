import { Injectable } from '@angular/core';
import { Response, Http } from '@angular/http';
import { Store, select } from '@ngrx/store';
import { Observable, Subject, asapScheduler, pipe, of, from, interval, merge, fromEvent, SubscriptionLike, PartialObserver } from 'rxjs';
import { map, filter, scan } from 'rxjs/operators';
// import { BaseService } from '../_services/base.service';
// import { HttpService } from '../core/http.service';
import { Project } from './models/projects';
import { AppStore } from '../../app.store';
import * as ProjectActions from './store/project.actions';
import { ProjectPage } from './models/projectPage';
import { PageRequest } from '../../models/pageRequest';
import * as RouterActions from '../../actions/router.actions';

@Injectable()
export class ProjectService {

  // Redux based variables

  projectPage$: Observable<ProjectPage>;
  loading$: Observable<boolean>;
  validationErrors$: Observable<{}[]>;
  selectedProject$: Observable<Project>;
  errorMessage$: Observable<any>;
  constructor(private http: Http, private store: Store<AppStore>) {
    this.projectPage$ = store.select(x => x.projects.projectPage);
    this.loading$ = store.select(x => x.projects.isLoading);
    this.validationErrors$ = this.store.select(x => x.projects.validationErrors);
    this.selectedProject$ = this.store.select(x => x.projects.selectedProject);
    this.errorMessage$ = this.store.select(x => x.projects.errorMessage);
  }

  getPage(pageRequest: PageRequest) {
    if (!pageRequest) {
      pageRequest = new PageRequest().asDefault();
    }
    const action = new ProjectActions.GetAllProjects(pageRequest);
    return this.store.dispatch(action);
  }

  get(projectId: string) {
    const action = new ProjectActions.GetProject(projectId);
    return this.store.dispatch(action);
  }

  create(project: Project): void {
    const action = new ProjectActions.CreateProject(project);
    return this.store.dispatch(action);
  }

  update(project: Project): void {
    const action = new ProjectActions.UpdateProject(project);
    return this.store.dispatch(action);
  }

  delete(projectId: string) {
    const action = new ProjectActions.DeleteProject(projectId);
    return this.store.dispatch(action);
  }

  goToEdit(projectId: string) {
    this.store.dispatch(new RouterActions.Go({
      // https://github.com/ngrx/platform/blob/master/docs/router-store/api.md#navigation-actions
      path: ['projects/edit/', projectId],
    }));
  }

  goToCreate() {
    this.store.dispatch(new RouterActions.Go({
      // https://github.com/ngrx/platform/blob/master/docs/router-store/api.md#navigation-actions
      path: ['/projects/create']
    }));
  }
}
