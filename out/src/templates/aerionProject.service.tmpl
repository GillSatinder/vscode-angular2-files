import { Injectable } from '@angular/core';
import { Response, Http } from '@angular/http';
import { Store, select } from '@ngrx/store';
import { Observable, Subject, asapScheduler, pipe, of, from, interval, merge, fromEvent, SubscriptionLike, PartialObserver } from 'rxjs';
import { map, filter, scan } from 'rxjs/operators';
// import { BaseService } from '../_services/base.service';
// import { HttpService } from '../core/http.service';
import { ${modelName} } from './models/${modelName.toLowerCase()}s';
import { AppStore } from '../../app.store';
import * as ${modelName}Actions from './store/${modelName.toLowerCase()}.actions';
import { ${modelName}Page } from './models/${modelName.toLowerCase()}Page';
import { PageRequest } from '../../models/pageRequest';
import * as RouterActions from '../../actions/router.actions';

@Injectable()
export class ${modelName}Service {

  // Redux based variables

  ${modelName.toLowerCase()}Page$: Observable<${modelName}Page>;
  loading$: Observable<boolean>;
  validationErrors$: Observable<{}[]>;
  selected${modelName}$: Observable<${modelName}>;
  errorMessage$: Observable<any>;
  constructor(private http: Http, private store: Store<AppStore>) {
    this.${modelName.toLowerCase()}Page$ = store.select(x => x.${modelName.toLowerCase()}s.${modelName.toLowerCase()}Page);
    this.loading$ = store.select(x => x.${modelName.toLowerCase()}s.isLoading);
    this.validationErrors$ = this.store.select(x => x.${modelName.toLowerCase()}s.validationErrors);
    this.selected${modelName}$ = this.store.select(x => x.${modelName.toLowerCase()}s.selected${modelName});
    this.errorMessage$ = this.store.select(x => x.${modelName.toLowerCase()}s.errorMessage);
  }

  getPage(pageRequest: PageRequest) {
    if (!pageRequest) {
      pageRequest = new PageRequest().asDefault();
    }
    const action = new ${modelName}Actions.GetAll${modelName}s(pageRequest);
    return this.store.dispatch(action);
  }

  get(${modelName.toLowerCase()}Id: string) {
    const action = new ${modelName}Actions.Get${modelName}(${modelName.toLowerCase()}Id);
    return this.store.dispatch(action);
  }

  create(${modelName.toLowerCase()}: ${modelName}): void {
    const action = new ${modelName}Actions.Create${modelName}(${modelName.toLowerCase()});
    return this.store.dispatch(action);
  }

  update(${modelName.toLowerCase()}: ${modelName}): void {
    const action = new ${modelName}Actions.Update${modelName}(${modelName.toLowerCase()});
    return this.store.dispatch(action);
  }

  delete(${modelName.toLowerCase()}Id: string) {
    const action = new ${modelName}Actions.Delete${modelName}(${modelName.toLowerCase()}Id);
    return this.store.dispatch(action);
  }

  goToEdit(${modelName.toLowerCase()}Id: string) {
    this.store.dispatch(new RouterActions.Go({
      // https://github.com/ngrx/platform/blob/master/docs/router-store/api.md#navigation-actions
      path: ['${modelName.toLowerCase()}s/edit/', ${modelName.toLowerCase()}Id],
    }));
  }

  goToCreate() {
    this.store.dispatch(new RouterActions.Go({
      // https://github.com/ngrx/platform/blob/master/docs/router-store/api.md#navigation-actions
      path: ['/${modelName.toLowerCase()}s/create']
    }));
  }
}
