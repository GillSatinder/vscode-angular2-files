import * as from${modelName}Reducer from './../store/${modelName.toLowerCase()}.reducer';
import * as from${modelName}Action from './../store/${modelName.toLowerCase()}.actions';
import {${modelName}Page} from '../models/${modelName.toLowerCase()}Page';
import {${modelName}} from '../models/${modelName.toLowerCase()}';
import {PageRequest} from '../../../models/pageRequest';



describe('${modelName}Reducer', () => {
  it('should set the ${modelName.toLowerCase()} page', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = new ${modelName}Page({
      totalResults: 2,
      totalPages: 18,
      currentPage: 2,
      pageSize: 9,
      searchTerm: '',
      pagedData: []
    });
    const  action = new from${modelName}Action.Set${modelName}Page(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(false);
    expect(state.errorMessage).toEqual(null);
    expect(state.validationErrors).toEqual(null);
  });
});

describe('${modelName}Reducer', () => {
  it('should get all the ${modelName}s', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const pageRequest = new PageRequest();
    const payload = pageRequest.asDefault();
    const action = new from${modelName}Action.GetAll${modelName}s(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(true);
    expect(state.errorMessage).toEqual(null);
    expect(state.validationErrors).toEqual(null);
  });
});

describe('${modelName}Reducer', () => {
  it('should create ${modelName.toLowerCase()}', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = new ${modelName}({id: 1, name: 'ss', description: 'new ${modelName.toLowerCase()}'});
    const action = new from${modelName}Action.Create${modelName}(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(true);
    expect(state.errorMessage).toEqual(null);
    expect(state.validationErrors).toEqual(null);
  });
});

describe('${modelName}Reducer', () => {
  it('should create ${modelName.toLowerCase()} success', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = new ${modelName}({id: 1, name: 'ss', description: 'new ${modelName.toLowerCase()}'});
    const action = new from${modelName}Action.Create${modelName}Success(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(false);
    expect(state.errorMessage).toEqual(null);
    expect(state.validationErrors).toEqual(null);
    expect(state.selected${modelName}).toEqual(action.payload);
  });
});

describe('${modelName}Reducer', () => {
  it('should create validation failed action', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = 'new payload';
    const action = new from${modelName}Action.ValidationFailed(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(false);
    expect(state.errorMessage).toEqual(null);
    expect(state.validationErrors).toEqual(action.payload);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for Api Failed', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = 'new payload';
    const action = new from${modelName}Action.ApiFailed(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);


    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(false);
    expect(state.errorMessage).toEqual(action.payload);
    expect(state.validationErrors).toEqual(null);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for get${modelName}', () => {
    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = 'Get new ${modelName.toLowerCase()}';
    const action = new from${modelName}Action.Get${modelName}(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);


    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(true);
    expect(state.errorMessage).toEqual(null);
    expect(state.validationErrors).toEqual(null);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for get${modelName}Success', () => {
    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = new ${modelName}({id: 1, name: 'ss', description: 'new ${modelName.toLowerCase()}'});
    const action = new from${modelName}Action.Get${modelName}Success(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);


    // verify
    expect(state).not.toEqual(initialState);
    expect(state.selected${modelName}).toEqual(action.payload);
    expect(state.isLoading).toEqual(false);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for update${modelName}', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = new ${modelName}({id: 1, name: 'ss', description: 'new ${modelName.toLowerCase()}'});
    const action = new from${modelName}Action.Update${modelName}(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(true);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for update${modelName}Success', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const action = new from${modelName}Action.Update${modelName}Success();
    const state =  from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state.isLoading).toEqual(false);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for delete${modelName}', () => {
    // setup
    const {initialState} = from${modelName}Reducer;
    const payload = '1';
    const action = new from${modelName}Action.Delete${modelName}(payload);
    const state = from${modelName}Reducer.reducer(initialState, action);


    // verify
    expect(state).not.toEqual(initialState);
    expect(state.isLoading).toEqual(true);
  });
});

describe('${modelName}Reducer', () => {
  it('should create an action for delete${modelName}Success', () => {

    // setup
    const {initialState} = from${modelName}Reducer;
    const action = new from${modelName}Action.Delete${modelName}Success();
    const state =  from${modelName}Reducer.reducer(initialState, action);

    // verify
    expect(state.isLoading).toEqual(false);
  });
});

