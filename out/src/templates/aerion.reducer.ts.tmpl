import { ${modelName}ActionTypes, ${modelName}ActionsUnion } from './${modelName.toLowerCase()}.actions';
import { ${modelName}State } from './${modelName.toLowerCase()}.state.interface';


export const initialState: ${modelName}State = {
  ${modelName.toLowerCase()}Page: null,
  selected${modelName}: null,
  isLoading: false,
  errorMessage: null,
  validationErrors: null,
};

export function reducer(state: ${modelName}State = initialState, action: ${modelName}ActionsUnion): ${modelName}State {
  switch (action.type) {
    case ${modelName}ActionTypes.SET_${modelName.toUpperCase()}_PAGE:
      return {
        ...state,
        ${modelName.toLowerCase()}Page: action.payload,
        isLoading: false,
        errorMessage: null,
        validationErrors: null
      };
    case ${modelName}ActionTypes.GET_ALL_${modelName.toUpperCase()}S:
      return {
        ...state,
        isLoading: true,
        errorMessage: null,
        validationErrors: null
      };

    case ${modelName}ActionTypes.CREATE_${modelName.toUpperCase()}:
      return {
        ...state,
        isLoading: true,
        errorMessage: null,
        validationErrors: null
      };

    case ${modelName}ActionTypes.CREATE_${modelName.toUpperCase()}_SUCCESS:
      return {
        ...state,
        isLoading: false,
        selected${modelName}: action.payload,
        errorMessage: null,
        validationErrors: null
      };
    case ${modelName}ActionTypes.VALIDATION_FAILED:
      return {
        ...state,
        isLoading: false,
        errorMessage: null,
        validationErrors: action.payload
      };
    case ${modelName}ActionTypes.APIFailed:
      return {
        ...state,
        isLoading: false,
        errorMessage: action.payload,
        validationErrors: null
      };
    case ${modelName}ActionTypes.GET_${modelName.toUpperCase()}:
      return {
        ...state,
        isLoading: true,
        errorMessage: null,
        validationErrors: null
      };

    case ${modelName}ActionTypes.GET_${modelName.toUpperCase()}_SUCCESS:
      return {
        ...state,
        selected${modelName}: action.payload,
        isLoading: false
      };
      case ${modelName}ActionTypes.UPDATE_${modelName.toUpperCase()}:
      return {
        ...state,
        isLoading: true
      };
      case ${modelName}ActionTypes.UPDATE_${modelName.toUpperCase()}_SUCCESS:
      return {
        ...state,
        isLoading: false
      };

      case ${modelName}ActionTypes.DELETE_${modelName.toUpperCase()}:
      return {
        ...state,
        isLoading: true
      };

      case ${modelName}ActionTypes.DELETE_${modelName.toUpperCase()}_SUCCESS:
      return {
        ...state,
        isLoading: false
      };
    default:
      return state;
  }
}

// export const isLoggedIn = (state: ${modelName}State) => state.isLoggedIn;
// export const getUserFromToken = (state: ${modelName}State) => state.token;
