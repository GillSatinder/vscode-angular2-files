import {${modelName}} from '../models/${modelName.toLowerCase()}';
import {
  ApiFailed,
  Create${modelName},
  Create${modelName}Success,
  Delete${modelName}, Delete${modelName}Success, GetAll${modelName}s, Get${modelName}, Get${modelName}Success,
  ${modelName}ActionTypes, Set${modelName}Page,
  Update${modelName},
  Update${modelName}Success, ValidationFailed
} from './${modelName.toLowerCase()}.actions';
import {PageRequest} from '../../../models/pageRequest';
import {${modelName}Page} from '../models/${modelName.toLowerCase()}Page';

describe('Create${modelName}', () => {
  it('should create an action ', () => {

    // setup
    const payload = new ${modelName}({id: '', name: '', description: ''});
    const action = new Create${modelName}(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.CREATE_${modelName.toUpperCase()});
    expect(action.payload).toEqual(payload);
  });
});

describe('Create${modelName}Success', () => {
    it('should create an action', () => {

      // setup
      const payload = new ${modelName}({id: '', name: '', description: ''});
      const action = new Create${modelName}Success(payload);

      // verify
      expect(action.type).toEqual(${modelName}ActionTypes.CREATE_${modelName.toUpperCase()}_SUCCESS);
      expect(action.payload).toEqual(payload);
    });
});

describe('Update${modelName}', () => {
  it('should create an action', () => {

        // setup
        const payload = new ${modelName}({id: '', name: '', description: ''});
        const action = new Update${modelName}(payload);

        // verify
        expect(action.type).toEqual(${modelName}ActionTypes.UPDATE_${modelName.toUpperCase()});
        expect(action.payload).toEqual(payload);
  });
});

describe('Update${modelName}Success', () => {
  it('should create an action', () => {

    // setup
    const action = new Update${modelName}Success();

    // verify
// both are working, choose any one as per the condition.
    expect({...action}).toEqual({type: ${modelName}ActionTypes.UPDATE_${modelName.toUpperCase()}_SUCCESS});
    expect(action.type).toEqual(${modelName}ActionTypes.UPDATE_${modelName.toUpperCase()}_SUCCESS);
  });
});

describe('Delete${modelName}', () => {
  it('should create a delete action', () => {
    // setup
    const payload = 'id';
    const action = new Delete${modelName}(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.DELETE_${modelName.toUpperCase()});
    expect(action.payload).toEqual(payload);
  });
});

describe('Delete${modelName}Success', () => {
  it('should create a delete action', () => {

    // setup
    const action = new Delete${modelName}Success();

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.DELETE_${modelName.toUpperCase()}_SUCCESS);
    expect({...action}).toEqual({type: ${modelName}ActionTypes.DELETE_${modelName.toUpperCase()}_SUCCESS});
  });
});


// starting from here now

describe('GetAll${modelName}s', () => {
  it('should create an GetAll${modelName}s action', () => {

    // setup
    const payload = new PageRequest();
    payload.asDefault();
    const action = new GetAll${modelName}s(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.GET_ALL_${modelName.toUpperCase()}S);
    expect(action.payload).toEqual(payload);
  });
});

describe('Get${modelName}', () => {
  it('should get the action for get${modelName}', () => {

    // setup
    const payload = '1';
    const action = new Get${modelName}(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.GET_${modelName.toUpperCase()});
    expect(action.payload).toEqual(payload);
  });
});

describe('Set${modelName}Page()', () => {
  it('should get the action for set${modelName}Page', () => {

    // setup
    const payload = new ${modelName}Page();
    const action = new Set${modelName}Page(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.SET_${modelName.toUpperCase()}_PAGE);
    expect(action.payload).toEqual(payload);
  });
});

describe('ApiFailed', () => {
  it('should create an action for ApiFailed', () => {

    // setup
    const payload = 'any';
    const action = new ApiFailed(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.APIFailed);
    expect(action.payload).toEqual(payload);
  });
});

describe('ValidationFailed', () => {
  it('should create an action for ValidationFailed', () => {

    // setup
    const payload = 'any';
    const action = new ValidationFailed(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.VALIDATION_FAILED);
    expect(action.payload).toEqual(payload);
  });
});

describe('Get${modelName}Success', () => {
  it('should create an action for ApiFailed', () => {

    // setup
    const payload = new ${modelName}({id: '', name: '', description: ''});
    const action = new Get${modelName}Success(payload);

    // verify
    expect(action.type).toEqual(${modelName}ActionTypes.GET_${modelName.toUpperCase()}_SUCCESS);
    expect(action.payload).toEqual(payload);
  });
});

