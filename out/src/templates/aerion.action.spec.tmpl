import {${inputName.charAt(0).toUpperCase() + inputName.slice(1)}} from '../models/${inputName}s';
import {
  ApiFailed,
  Create${inputName.charAt(0).toUpperCase() + inputName.slice(1)},
  Create${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success,
  Delete${inputName.charAt(0).toUpperCase() + inputName.slice(1)}, Delete${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success, GetAll${inputName.charAt(0).toUpperCase() + inputName.slice(1)}s, Get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}, Get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success,
  ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes, Set${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Page,
  Update${inputName.charAt(0).toUpperCase() + inputName.slice(1)},
  Update${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success, ValidationFailed
} from './${inputName}.actions';
import {PageRequest} from '../../../models/pageRequest';
import {${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Page} from '../models/${inputName}Page';

describe('Create${inputName.charAt(0).toUpperCase() + inputName.slice(1)}', () => {
  it('should create an action', () => {

    // setup
    const payload = new ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}({id: '', name: '', description: ''});
    const action = new Create${inputName.charAt(0).toUpperCase() + inputName.slice(1)}(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.CREATE_${inputName.toUpperCase()});
    expect(action.payload).toEqual(payload);
  });
});

describe('Create${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success', () => {
    it('should create an action', () => {

      // setup
      const payload = new ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}({id: '', name: '', description: ''});
      const action = new Create${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success(payload);

      // verify
      expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.CREATE_${inputName.toUpperCase()}_SUCCESS);
      expect(action.payload).toEqual(payload);
    });
});

describe('Update${inputName.charAt(0).toUpperCase() + inputName.slice(1)}', () => {
  it('should create an action', () => {

        // setup
        const payload = new ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}({id: '', name: '', description: ''});
        const action = new Update${inputName.charAt(0).toUpperCase() + inputName.slice(1)}(payload);

        // verify
        expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.UPDATE_${inputName.toUpperCase()});
        expect(action.payload).toEqual(payload);
  });
});

describe('Update${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success', () => {
  it('should create an action', () => {

    // setup
    const action = new Update${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success();

    // verify
// both are working, choose any one as per the condition.
    expect({...action}).toEqual({type: ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.UPDATE_${inputName.toUpperCase()}_SUCCESS});
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.UPDATE_${inputName.toUpperCase()}_SUCCESS);
  });
});

describe('Delete${inputName.charAt(0).toUpperCase() + inputName.slice(1)}', () => {
  it('should create a delete action', () => {
    // setup
    const payload = 'id';
    const action = new Delete${inputName.charAt(0).toUpperCase() + inputName.slice(1)}(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.DELETE_${inputName.toUpperCase()});
    expect(action.payload).toEqual(payload);
  });
});

describe('Delete${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success', () => {
  it('should create a delete action', () => {

    // setup
    const action = new Delete${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success();

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.DELETE_${inputName.toUpperCase()}_SUCCESS);
    expect({...action}).toEqual({type: ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.DELETE_${inputName.toUpperCase()}_SUCCESS});
  });
});

describe('GetAll${inputName.charAt(0).toUpperCase() + inputName.slice(1)}s', () => {
  it('should create an GetAll${inputName.charAt(0).toUpperCase() + inputName.slice(1)}s action', () => {

    // setup
    const payload = new PageRequest();
    payload.asDefault();
    const action = new GetAll${inputName.charAt(0).toUpperCase() + inputName.slice(1)}s(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.GET_ALL_${inputName.toUpperCase()}S);
    expect(action.payload).toEqual(payload);
  });
});

describe('Get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}', () => {
  it('should get the action for get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}', () => {

    // setup
    const payload = '1';
    const action = new Get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.GET_${inputName.toUpperCase()});
    expect(action.payload).toEqual(payload);
  });
});

describe('Set${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Page()', () => {
  it('should get the action for set${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Page', () => {

    // setup
    const payload = new ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Page();
    const action = new Set${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Page(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.SET_${inputName.toUpperCase()}_PAGE);
    expect(action.payload).toEqual(payload);
  });
});

describe('ApiFailed', () => {
  it('should create an action for ApiFailed', () => {

    // setup
    const payload = 'any';
    const action = new ApiFailed(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.APIFailed);
    expect(action.payload).toEqual(payload);
  });
});

describe('ValidationFailed', () => {
  it('should create an action for ValidationFailed', () => {

    // setup
    const payload = 'any';
    const action = new ValidationFailed(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.VALIDATION_FAILED);
    expect(action.payload).toEqual(payload);
  });
});

describe('Get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success', () => {
  it('should create an action for ApiFailed', () => {

    // setup
    const payload = new ${inputName.charAt(0).toUpperCase() + inputName.slice(1)}({id: '', name: '', description: ''});
    const action = new Get${inputName.charAt(0).toUpperCase() + inputName.slice(1)}Success(payload);

    // verify
    expect(action.type).toEqual(${inputName.charAt(0).toUpperCase() + inputName.slice(1)}ActionTypes.GET_${inputName.toUpperCase()}_SUCCESS);
    expect(action.payload).toEqual(payload);
  });
});

