import { Injectable } from '@angular/core';
import { Http, RequestOptionsArgs, Headers, RequestOptions } from '@angular/http';
import { Actions, Effect, ofType } from '@ngrx/effects';
import { Observable, Subject, asapScheduler, pipe, of, from, interval, merge, fromEvent, SubscriptionLike, PartialObserver } from 'rxjs';
import { map, switchMap, catchError, tap, withLatestFrom } from 'rxjs/operators';
import * as ${modelName}Actions from './${modelName.toLowerCase()}.actions';
import { ${modelName}ActionTypes } from './${modelName.toLowerCase()}.actions';
import { Router } from '@angular/router';
import { ${modelName} } from '../models/${modelName.toLowerCase()}';
import { URLSearchParams } from '@angular/http';
import { ${modelName}Page } from '../models/${modelName.toLowerCase()}Page';
import * as RouterActions from '../../../actions/router.actions';
import { ToasterService } from 'angular2-toaster';
import { Store } from '@ngrx/store';
import { AppStore } from '../../../app.store';
import { PageRequest } from '../../../models/pageRequest';

@Injectable()
export class ${modelName}Effects {
  private endPoint = '/api/v1/${modelName.toLowerCase()}s';  // URL to web API
  constructor(private store$: Store<AppStore>,
              private http: Http,
              private actions$: Actions,
              private router: Router,
              protected toasterService: ToasterService) {
  }

  @Effect() getAll${modelName}s$ = this.actions$
    // Listen for the 'GET_ALL_${modelName.toUpperCase()}S' action
    .ofType(${modelName}ActionTypes.GET_ALL_${modelName.toUpperCase()}S).pipe(
      switchMap((action: ${modelName}Actions.GetAll${modelName}s) => {
        // prepare params
        let urlSearchParams = null;
        if (action) {
          urlSearchParams = action.payload.toUrlSearchParams();
        }
        const requestOptions = new RequestOptions();
        requestOptions.params = urlSearchParams.toString();

        // prepare headers
        return this.http.get(this.endPoint, requestOptions).pipe(
          // If successful, dispatch success action with result

          map((response: Response) => {
            const ${modelName.toLowerCase()}Page = response.json();
            if (${modelName.toLowerCase()}Page) {
              return new ${modelName}Page().deserialize(${modelName.toLowerCase()}Page);
            }
            return null;
          }),
          map((${modelName.toLowerCase()}Page: ${modelName}Page) => {
            return new ${modelName}Actions.Set${modelName}Page(${modelName.toLowerCase()}Page);
          })
          // If request fails, dispatch failed action
          , catchError((err, caught) => {
            return of(new ${modelName}Actions.ApiFailed(err));
          })
        );
      })
    );

  @Effect() create${modelName}$ = this.actions$
    // Listen for the 'CREATE_${modelName.toUpperCase()}' action
    .ofType(${modelName}ActionTypes.CREATE_${modelName.toUpperCase()}).pipe(
      switchMap((action: ${modelName}Actions.Create${modelName}) => {
        // prepare headers
        return this.http.post(this.endPoint, action.payload).pipe(
          // If successful, dispatch success action with result
          map((response: Response) => {
            const ${modelName.toLowerCase()}Json = response.json();
            let ${modelName.toLowerCase()} = null;
            if (${modelName.toLowerCase()}Json) {
              ${modelName.toLowerCase()} = new ${modelName}().deserialize(${modelName.toLowerCase()}Json);
            }
            this.toasterService.pop('success', '${modelName} created', 'The ${modelName.toLowerCase()} was successffully Created');

            return new ${modelName}Actions.Create${modelName}Success(${modelName.toLowerCase()});
          })
          // If request fails, dispatch failed action
          , catchError((err: Response, caught) => {
            // https://github.com/ngrx/platform/issues/646#issuecomment-381437629
            if (err.status === 422) {
              return of(new ${modelName}Actions.ValidationFailed(err.json()));
            }
            return of(new ${modelName}Actions.ApiFailed(err));
          })
        );
      })

    );

  @Effect() create${modelName}Success$ = this.actions$
    // Listen for the 'CREATE_${modelName.toUpperCase()}' action
    .ofType(${modelName}ActionTypes.CREATE_${modelName.toUpperCase()}_SUCCESS).pipe(
      map((action: ${modelName}Actions.Create${modelName}Success) => new RouterActions.Go({
        // https://github.com/ngrx/platform/blob/master/docs/router-store/api.md#navigation-actions
        path: ['/${modelName.toLowerCase()}s/edit/' + action.payload.id]
      }))
    );


  @Effect() get${modelName}$ = this.actions$
    // Listen for the 'GET_${modelName.toUpperCase()}' action
    .ofType(${modelName}ActionTypes.GET_${modelName.toUpperCase()}).pipe(
      switchMap((action: ${modelName}Actions.Get${modelName}) => {
        return this.http.get(this.endPoint + '/GetSingle/' + action.payload).pipe(
          // If successful, dispatch success action with result
          map((response: Response) => {
            const ${modelName.toLowerCase()} = response ? response.json() : null;
            if (${modelName.toLowerCase()}) {
              return new ${modelName}().deserialize(${modelName.toLowerCase()});
            }
            return null;
          }),
          map((${modelName.toLowerCase()}: ${modelName}) => {
            return new ${modelName}Actions.Get${modelName}Success(${modelName.toLowerCase()});
          })
          // If request fails, dispatch failed action
          , catchError((err, caught) => {
            return of(new ${modelName}Actions.ApiFailed(err));
          })
        );
      })
    );


  @Effect() update${modelName}$ = this.actions$
    // Listen for the 'Update${modelName}' action
    .ofType(${modelName}ActionTypes.UPDATE_${modelName.toUpperCase()}).pipe(
      switchMap((action: ${modelName}Actions.Update${modelName}) => {
        return this.http.put(this.endPoint + '/?id=' + action.payload.id, action.payload).pipe(
          // If successful, dispatch success action with result
          map((response: Response) => {
            if (response.status === 200) {
              this.toasterService.pop('success', '${modelName} updated', 'The ${modelName.toLowerCase()} was successffully updated');
              return new ${modelName}Actions.Update${modelName}Success();
            }
            return new ${modelName}Actions.ApiFailed(response);
          })
          // If request fails, dispatch failed action
          , catchError((err, caught) => {
            if (err.status === 422) {
              return of(new ${modelName}Actions.ValidationFailed(err.json()));
            }

            return of(new ${modelName}Actions.ApiFailed(err));
          })
        );
      })
    );

  @Effect() delete${modelName}$ = this.actions$
    // Listen for the 'Update${modelName}' action
    .ofType(${modelName}ActionTypes.DELETE_${modelName.toUpperCase()}).pipe(
      switchMap((action: ${modelName}Actions.Delete${modelName}) => {
        return this.http.delete(this.endPoint + '/?id=' + action.payload).pipe(
          // If successful, dispatch success action with result
          map((response: Response) => {
            if (response.status === 200) {
              this.toasterService.pop('success', '${modelName} Deleted', 'The ${modelName.toLowerCase()} was successffully updated');
              return new ${modelName}Actions.Delete${modelName}Success();
            }
            return new ${modelName}Actions.ApiFailed(response);
          })
          // If request fails, dispatch failed action
          , catchError((err, caught) => {
            if (err.status === 422) {
              return of(new ${modelName}Actions.ValidationFailed(err.json()));
            }

            return of(new ${modelName}Actions.ApiFailed(err));
          })
        );
      })
    );

  @Effect() delete${modelName}Success$ = this.actions$
    // Listen for the 'Update${modelName}' action
    .ofType(${modelName}ActionTypes.DELETE_${modelName.toUpperCase()}_SUCCESS).pipe(
      withLatestFrom(this.store$.select(x => x.${modelName.toLowerCase()}s.${modelName.toLowerCase()}Page ))
      , map(([action, page]) => {
      
        // make a new page request with the current page details as we deleted one from the list
        const pageRequest = new PageRequest();
        pageRequest.page = page.currentPage;
        pageRequest.pageSize = page.pageSize;
        pageRequest.searchTerm = page.searchTerm;
        return new ${modelName}Actions.GetAll${modelName}s(pageRequest);
      })
    );

}
