import { Component, OnInit, OnDestroy } from '@angular/core';
import { ${modelName} } from '../models/${modelName.toLowerCase()}';
import { FormBuilder } from '@angular/forms';
import { BaseComponent } from '../../base.component';
import { FormSubmission } from '../../../interfaces/formSubmission';
import { ${serviceName} } from '../${modelName.toLowerCase()}-service';
import { UUID } from 'angular2-uuid';
import { Subscription } from 'rxjs';
import { ActivatedRoute, Router, Params } from '@angular/router';
import { switchMap } from 'rxjs/operators';
import { ToasterService } from 'angular2-toaster';

@Component({
  selector: '${cmpSelector}',
  ${componentInlineTemplate ? `template: \`\n   <p>\n  \t\t${inputName} Works!\n   </p>\n  \`` : `templateUrl: './${inputName}-edit.component.html'`},
  ${componentInlineStyle ? 'styles: []' : `styleUrls: ['./${inputName}-edit.component.${defaultsStyleExt}']`}${componentViewEncapsulation !== 'Emulated' ? `,\n  encapsulation: ViewEncapsulation.${componentViewEncapsulation}` : ''}${componentChangeDetection !== 'Default' ? `,\n  changeDetection: ChangeDetectionStrategy.OnPush` : ''}
})
export class  ${upperName}Component extends BaseComponent implements OnInit, OnDestroy {

  model: ${modelName};
  validationSubscriptions: Subscription;
  isCreateMode: boolean;


  /**
   *Creates an instance of ${upperName}Component.
   * @param {FormBuilder} formBuilder
   * @memberof ${upperName}Component
   */
  constructor(formBuilder: FormBuilder, private ${serviceNameVariable}: ${serviceName}, private route: ActivatedRoute, private router: Router) {
    super(formBuilder);
  }

  /**
   *Oninit method
   *
   * @memberof  ${upperName}Component
   */
  ngOnInit(): void {
     this.routeSubscription = this.route.params.subscribe(params => {
      const projectId = params['id'];
      this.${serviceNameVariable}.get(projectId);
    }, error => { });
     this.${serviceNameVariable}.selected${modelName}$.subscribe(result => {
      if (result) {
        this.model = result;
        this.buildForm();
        this.form.patchValue(this.model);
      }
    }, error => { });

    this.validationSubscriptions = this.${serviceNameVariable}.validationErrors$.subscribe(errors => {
      if (errors != null) {
        for (const error in errors) {
          if (error) {
            this.model.formErrors[error] = errors[error];
          }
        }
      }
    });
  }

  ngOnDestroy(): void {
    // Called once, before the instance is destroyed.
    // Add 'implements OnDestroy' to the class.
    super.ngOnDestroy();
    this.unsubscribeSubscription([this.validationSubscriptions]);

  }

  buildForm(): void {
    this.form = this.formBuilder.group(this.model.formControls);
    this.formSubscription = this.form.valueChanges
       .subscribe(data => this.onValueChanged(data));
    this.onValueChanged(); // (re)set validation messages now
  }

  onSubmit(formSubmission: FormSubmission<${modelName}>) {
    if (formSubmission.valid) {
      this.model.patchByForm(formSubmission.value);
      this.${serviceNameVariable}.update(this.model);
    } else {
      this.setFormTouchedAndDirtyIfNeeded();
    }
  }
}
